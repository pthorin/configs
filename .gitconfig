[user]
  name = Peter Thorin
	email = peter.thorin@speedledger.se
  editor = vim
[alias]
  ls = log --graph --decorate --format=short --all
  lsg = log --graph --decorate --all
  lsp = log --graph --decorate --format=short --all -p
  last = log -1
  st = status --short
  co = checkout
  ec = config --global -e
  up = !git pull --rebase --prune $@
  cob = checkout -b
  save = !git add -A && git commit -m 'SAVEPOINT'
  wip = commit -am "WIP"
  undo = reset HEAD~1 --mixed
  amend = commit -a --amend
  can = commit -a --amend --no-edit
  wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
	pushf = push origin --force-with-lease
  bclean = "!f() { git checkout ${1-master} && git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs git branch -d; }; f"
  bdone = "!f() { git checkout ${2-master} && git up && git bclean ${1-master}; }; f"
  # rebdone = "!f() { git checkout master && git up && git checkout $1 && git rebase master && if [ $(git need-rebase) -eq 1 ]; then git rebase master ; fi && git bdone }; f"
  clean-branches ="!f() { git checkout master && git up && git branch --list |grep -v " master$" | xargs git branch -d; }; f"
  list = branch --list
  list-merged = branch --merged
  need-rebase = "!f() { current=$(git rev-parse --abbrev-ref HEAD); hash1=$(git show-ref --heads -s master); hash2=$(git merge-base ${current} master); PAGER='' git diff --shortstat ${hash1} ${hash2}; test "${hash1}" = "${hash2}" && echo "Nah, we good." && exit 0 || echo "Rebase is required"; exit 1; }; f"
  copy-hash = "!git log -n1 --format='%H' |xclip -in -selection clipboard"
  changes-to-master = "diff --name-only master"
  praise = "blame"
  prco = "!hub pr checkout"
  prlist = "!hub pr list --color=always"
  prl = "pr list --color=always"
  dry = "!f() { git merge-tree $(git merge-base $2 $1) $2 $1; }; f"
  dryconflict = "dryconflict"
  documentation = "!f() { git show $(git blame $1 -L $2,$2 |awk '{print $1}') }; f"
  renametomain = "!f() { git fetch --all ; git remote set-head origin -a ; git branch --set-upstream-to origin/main ; git branch -m master main ; }; f"

[push]
	default = current
[pull]
	rebase = true
; [url "git@github.com:"]
; 	insteadOf = https://github.com/
[hooks "confirm"]
	match = TODO
	match = HACK
	match = FIXME
	match = ^//
[commit]
	verbose = true
